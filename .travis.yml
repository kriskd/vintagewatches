language: php
php:
    - 5.6
branches:
    except:
        - feature/free-order
        - presenters
git:
    submodules: false
install:
    - composer install --no-interaction
before_script:
    - phpenv rehash
    - chmod -R 777 Vendor/cakephp/cakephp/app/tmp
    - chmod -R 777 tmp/
    - mysql -e 'DROP DATABASE IF EXISTS `travis_app`; CREATE DATABASE `travis_app`;'
    - echo "<?php
      class DATABASE_CONFIG {
          public \$default = array(
              'datasource' => 'Database/Mysql',
              'host' => '0.0.0.0',
              'persistent' => false,
              'login' => 'travis',
              'password' => '',
              'database' => 'travis_app',
              'prefix' => '',
          );
          public \$test = array(
              'datasource' => 'Database/Mysql',
              'host' => '0.0.0.0',
              'persistent' => false,
              'login' => 'travis',
              'password' => '',
              'database' => 'travis_app',
              'prefix' => '',
          );
      }" > Config/database.php
    - echo "<?php
        function prod() {
            return false;
        } 
        function stage() {
            return false;
        } 
        App::import('Vendor', 'autoload');
        CakePlugin::loadAll(array(
                array('bootstrap' => false),
                'Stripe' => array('routes' => false)
            )
        ); 
        Configure::write('Stripe.TestSecret', 'sk_test_abcdefghijklmnopqrstuvwx');
        Configure::write('Stripe.TestPublishable', 'pk_test_abcdefghijklmnopqrstuvwx');
        Configure::write('Stripe.currency', 'usd');
        Configure::write('Stripe.mode', 'Test');
        Configure::write('Stripe.fields', array(
            'stripe_id' => 'id',
            'stripe_last4' => array('card' => 'last4'),
            'stripe_address_check' => array('card' => 'address_line1_check'),
            'stripe_zip_check' => array('card' => 'address_zip_check'),
            'stripe_cvc_check' => array('card' => 'cvc_check'),
            'stripe_paid' => 'paid',
            'stripe_amount' => 'amount'
        ));
        CakePlugin::load(
            'HtmlPurifier', array('bootstrap' => true)
        );
        Purifier::config('MyPurifier', array(
            'HTML.AllowedElements' => 'a,em,blockquote,p,strong,small,pre,code,span,ul,ol,li,img,h1,h2,h3,h4,h5,h6,br,hr'
        ));
        Purifier::config('StripAll', array('HTML.AllowedElements' => ''));
        Configure::write('ordersEmail', 'foo@bar.com');
        Configure::write('contactFormEmail', 'foo@bar.com');
        Configure::write('fromEmail', array(
                'foo@bar.com' => 'Foo Bar'
            )
        );" > Config/bootstrap.php
    - echo "<?php
        Configure::write('debug', 2);
        Configure::write('Routing.prefixes', array('admin'));
        Configure::write('App.encoding', 'UTF-8');
        Configure::write('Error', array(
            'handler' => 'ErrorHandler::handleError',
            'level' => E_ALL & ~E_DEPRECATED,
            'trace' => true
        ));
        Configure::write('Exception', array(
            'handler' => 'ErrorHandler::handleException',
            'renderer' => 'ExceptionRenderer',
            'log' => true
        ));
        Configure::write('Session', array(
            'defaults' => 'database',
                'checkAgent' => false,
                'ini', array('session.cookie_secure' => false, 'session.referer_check' => false)
            )
        );" > Config/core.php
    - echo "<?php
        Router::connect('/', array('controller' => 'pages', 'action' => 'display', 'home'));
        Router::connect('/sitemap', array('controller' => 'pages', 'action' => 'display', 'sitemap'));
        Router::connect('/mailinglist', array('controller' => 'pages', 'action' => 'mailinglist'));
        Router::connect('/contact-us', array('controller' => 'contacts', 'action' => 'index'));
        Router::connect(
            '/:slug',
            array(
                'controller' => 'invoices',
                'action' => 'pay',
                'admin' => false
            ),
            array(
                'slug' => '[a-z0-9]{32}',
                'pass' => array('slug')
            )
        );
        Router::connect('/pages/*', array('controller' => 'pages', 'action' => 'display'));
        Router::connect('/admin', array('controller' => 'orders', 'action' => 'index', 'admin' => true));
        CakePlugin::routes();
        Router::parseExtensions('json', 'html', 'xml');
        Router::redirect('/index/*', array('controller' => 'pages', 'action' => 'display', 'home'), array('status' => 301));
        Router::redirect('/store/*', array('controller' => 'watches', 'action' => 'index'), array('status' => 301));
        Router::redirect('/essentials/*', array('controller' => 'pages', 'action' => 'display', 'essential-information', array('status' => 301)));
        Router::redirect('/buy/*', array('controller' => 'pages', 'action' => 'display', 'sell-trade'), array('status' => 301));
        Router::redirect('/gruenbook/*', array('controller' => 'watches', 'action' => 'index'), array('status' => 301));
        require CAKE . 'Config' . DS . 'routes.php';
      " > Config/routes.php
    - echo "<?php
        class EmailConfig {
            public \$smtp = array(
                'transport' => 'Smtp',
                'from' => array('foo@bar.com' => 'Foo Bar'),
                'host' => 'mail.bar.com',
                'port' => 587,
                'timeout' => 30,
                'username' => 'foo@bar.com',
                'password' => '123',
                'client' => null,
                'log' => true,
            );
        }" > Config/email.php
script:
    - sh -c "Console/cake test app AllTests --stderr"
notifications:
    email: false
after_success:
      - coveralls
